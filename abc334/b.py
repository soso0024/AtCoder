a, m, l, r = map(int, input().split())
l -= a
r -= a
r_side = r // m
l_side = (l - 1) // m
print(r_side - l_side)

"""
このコードの `l_side = (l - 1) // m` の部分で `-1` を行う理由について説明します。

この `-1` は、区間の左端を正確に計算するために必要な調整です。理由は以下の通りです：

1. 整数除算（`//`）は常に小さい方に丸められます。

2. 我々が求めているのは、完全に m で割り切れる数の個数です。

3. 左端の数 `l` が m で割り切れる場合、その数も含めて数える必要があります。

例を挙げて説明しましょう：

m = 3 で、l = 3 の場合を考えます。

- もし `-1` をしないと：3 // 3 = 1 となり、3 自体が含まれません。
- `-1` をすると：(3 - 1) // 3 = 0 となり、3 が含まれるようになります。

この調整により、区間の左端を正確に計算でき、m の倍数がぴったり左端にある場合でも、それを含めて数えることができます。

右端（r_side）ではこの調整が不要なのは、右端を含む計算になっているためです。

このテクニックは、特定の範囲内にある特定の倍数の個数を数える際によく使われます。

コードの詳細な説明や、さらに具体的な例が必要でしたら、お知らせください。
"""
